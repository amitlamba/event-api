package com.und.eventapi.rest

import com.und.eventapi.model.Event
import com.und.eventapi.model.Initializer
import com.und.eventapi.service.EventService
import com.und.security.utils.TenantProvider
import io.swagger.annotations.*
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.annotation.Scope
import org.springframework.mobile.device.Device
import org.springframework.web.bind.annotation.*

import javax.validation.Valid

@RestController
@Scope("request")
class EventRestController {

    @Autowired
    lateinit private var eventService: EventService

    @Autowired
    lateinit private var tenantProvider: TenantProvider

    @ApiOperation(value = "push a new event", notes = "This api call should send user event data along with user information. name of event, userid or anonymus user id, date and time, and other details ", response = Void::class, authorizations = arrayOf(Authorization(value = "userndot_api_key"), Authorization(value = "userndot_auth", scopes = arrayOf(AuthorizationScope(scope = "write_events", description = "push events generated by user in your account")))), tags = arrayOf("events"))
    @ApiResponses(value = *arrayOf(ApiResponse(code = 400, message = "Invalid key supplied", response = Void::class), ApiResponse(code = 404, message = "not found", response = Void::class)))
    @RequestMapping(value = "/event", produces = arrayOf("application/json"), consumes = arrayOf("application/json"), method = arrayOf(RequestMethod.POST))
    fun saveEvent(@ApiParam(value = "event object that needs to be tracked", required = true) @Valid @RequestBody event: Event): Event {
        event.clientId = tenantProvider.tenant
        return eventService.saveToKafkaEvent(event)
    }


    @ApiOperation(value = "push a new event", notes = "This api call should send user event data along with user information. name of event, userid or anonymus user id, date and time, and other details ", response = Void::class, authorizations = arrayOf(Authorization(value = "userndot_api_key"), Authorization(value = "userndot_auth", scopes = arrayOf(AuthorizationScope(scope = "read_events", description = "read events")))), tags = arrayOf("events"))
    @ApiResponses(value = *arrayOf(ApiResponse(code = 400, message = "Invalid key supplied", response = Void::class), ApiResponse(code = 404, message = "not found", response = Void::class)))
    @RequestMapping(value = "/event/{name}", produces = arrayOf("application/json"), method = arrayOf(RequestMethod.GET))
    fun getEvent(@PathVariable("name") name: String): List<Event> {
        return eventService.findByName(name)

    }

    @RequestMapping(value = "/event/initialize" , produces = arrayOf("application/json"), consumes = arrayOf("application/json"), method = arrayOf(RequestMethod.POST))
    fun initialize(@Valid @RequestBody initializer : Initializer, device : Device) :Initializer {

        return initializer
    }
}
